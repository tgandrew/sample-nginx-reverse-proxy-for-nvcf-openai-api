server {
    listen 80;
    # todo install certs then enable ssl
    server_name localhost;


    # user must provide an ngc api key that is valid in order to use our reverse proxy
    location /auth {
        internal;
        proxy_pass https://api.ngc.nvidia.com/v2/users/me;  # who am i endpoint
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Authorization $http_authorization;
    }

    # basic html page
    location /index.html {
        root /etc/nginx/html;
        index index.html;
    }

    # only our service has the secret for invoking the function
    # users token is disgarded at this point
    proxy_set_header Authorization "Bearer ${SERVER_SECRET_TOKEN}";
    
    # support streaming responses 
    proxy_set_header Accept text/event-stream;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection '';
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_buffering off;
    proxy_cache off;
    proxy_read_timeout 300s;
    proxy_send_timeout 300s;

    chunked_transfer_encoding on;
    proxy_set_header X-Accel-Buffering no;

    # first model support the /v1/completions endpoint
    location /model_1/v1/completions {
        auth_request /auth;  # require succesfull authorization first
        auth_request_set $auth_status $upstream_status;
        proxy_pass "https://api.nvcf.nvidia.com/v2/nvcf/pexec/functions/${MODEL_1_FUNCTION_ID}";
    }

    # add a second model
    location /model_2/v1/completions {
        auth_request /auth;
        auth_request_set $auth_status $upstream_status;
        proxy_pass "https://api.nvcf.nvidia.com/v2/nvcf/pexec/functions/${MODEL_2_FUNCTION_ID}";
    }
}
